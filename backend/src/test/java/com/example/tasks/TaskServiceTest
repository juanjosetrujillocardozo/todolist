package com.example.tasks;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.example.tasks.exception.TaskNotFoundException;
import com.example.tasks.model.Task;
import com.example.tasks.repository.TaskRepository;
import com.example.tasks.service.TaskService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Optional;

class TaskServiceTest {

    @Mock
    private TaskRepository taskRepository;

    @InjectMocks
    private TaskService taskService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllTasks() {
        Task task1 = new Task(1L, "Task 1", "Description 1", false);
        Task task2 = new Task(2L, "Task 2", "Description 2", true);
        when(taskRepository.findAll()).thenReturn(Arrays.asList(task1, task2));

        assertEquals(2, taskService.getAllTasks().size());
    }

    @Test
    void testGetTaskByIdFound() {
        Task task = new Task(1L, "Task 1", "Description 1", false);
        when(taskRepository.findById(1L)).thenReturn(Optional.of(task));

        assertEquals(task, taskService.getTaskById(1L));
    }

    @Test
    void testGetTaskByIdNotFound() {
        when(taskRepository.findById(1L)).thenReturn(Optional.empty());

        assertThrows(TaskNotFoundException.class, () -> taskService.getTaskById(1L));
    }

    @Test
    void testCreateTask() {
        Task task = new Task(null, "New Task", "New Description", false);
        Task savedTask = new Task(1L, "New Task", "New Description", false);
        when(taskRepository.save(task)).thenReturn(savedTask);

        assertEquals(savedTask, taskService.createTask(task));
    }

    @Test
    void testUpdateTask() {
        Task existingTask = new Task(1L, "Old Task", "Old Description", false);
        Task updatedTask = new Task(1L, "Updated Task", "Updated Description", true);
        when(taskRepository.findById(1L)).thenReturn(Optional.of(existingTask));
        when(taskRepository.save(existingTask)).thenReturn(updatedTask);

        assertEquals(updatedTask, taskService.updateTask(1L, updatedTask));
    }

    @Test
    void testUpdateTaskNotFound() {
        Task updatedTask = new Task(1L, "Updated Task", "Updated Description", true);
        when(taskRepository.findById(1L)).thenReturn(Optional.empty());

        assertThrows(TaskNotFoundException.class, () -> taskService.updateTask(1L, updatedTask));
    }

    @Test
    void testDeleteTask() {
        Task task = new Task(1L, "Task 1", "Description 1", false);
        when(taskRepository.findById(1L)).thenReturn(Optional.of(task));

        assertDoesNotThrow(() -> taskService.deleteTask(1L));
        verify(taskRepository, times(1)).delete(task);
    }

    @Test
    void testDeleteTaskNotFound() {
        when(taskRepository.findById(1L)).thenReturn(Optional.empty());

        assertThrows(TaskNotFoundException.class, () -> taskService.deleteTask(1L));
    }
}
