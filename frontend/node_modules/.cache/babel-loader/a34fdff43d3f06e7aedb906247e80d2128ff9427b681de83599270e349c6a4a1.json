{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: [],\n  reducers: {\n    createTask: (state, action) => {\n      state.push({\n        id: Date.now(),\n        name: action.payload.name,\n        completed: false\n      });\n    },\n    updateTask: (state, action) => {\n      const index = state.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) state[index] = action.payload;\n    },\n    deleteTask: (state, action) => {\n      return state.filter(task => task.id !== action.payload);\n    },\n    toggleTask: (state, action) => {\n      const task = state.find(t => t.id === action.payload);\n      if (task) task.completed = !task.completed;\n    },\n    setFilter: (state, action) => {\n      return {\n        ...state,\n        filter: action.payload\n      };\n    }\n  }\n});\nexport const {\n  createTask,\n  updateTask,\n  deleteTask,\n  toggleTask,\n  setFilter\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","tasksSlice","name","initialState","reducers","createTask","state","action","push","id","Date","now","payload","completed","updateTask","index","findIndex","task","deleteTask","filter","toggleTask","find","t","setFilter","actions","reducer"],"sources":["C:/todolist/todo-app/frontend/src/redux/store.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: [],\r\n  reducers: {\r\n    createTask: (state, action) => {\r\n      state.push({ id: Date.now(), name: action.payload.name, completed: false });\r\n    },\r\n    updateTask: (state, action) => {\r\n      const index = state.findIndex((task) => task.id === action.payload.id);\r\n      if (index !== -1) state[index] = action.payload;\r\n    },\r\n    deleteTask: (state, action) => {\r\n      return state.filter((task) => task.id !== action.payload);\r\n    },\r\n    toggleTask: (state, action) => {\r\n      const task = state.find((t) => t.id === action.payload);\r\n      if (task) task.completed = !task.completed;\r\n    },\r\n    setFilter: (state, action) => {\r\n      return { ...state, filter: action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { createTask, updateTask, deleteTask, toggleTask, setFilter } =\r\n  tasksSlice.actions;\r\nexport default tasksSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,UAAU,GAAGD,WAAW,CAAC;EAC7BE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACE,IAAI,CAAC;QAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAET,IAAI,EAAEK,MAAM,CAACK,OAAO,CAACV,IAAI;QAAEW,SAAS,EAAE;MAAM,CAAC,CAAC;IAC7E,CAAC;IACDC,UAAU,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAMQ,KAAK,GAAGT,KAAK,CAACU,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACR,EAAE,KAAKF,MAAM,CAACK,OAAO,CAACH,EAAE,CAAC;MACtE,IAAIM,KAAK,KAAK,CAAC,CAAC,EAAET,KAAK,CAACS,KAAK,CAAC,GAAGR,MAAM,CAACK,OAAO;IACjD,CAAC;IACDM,UAAU,EAAEA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MAC7B,OAAOD,KAAK,CAACa,MAAM,CAAEF,IAAI,IAAKA,IAAI,CAACR,EAAE,KAAKF,MAAM,CAACK,OAAO,CAAC;IAC3D,CAAC;IACDQ,UAAU,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAMU,IAAI,GAAGX,KAAK,CAACe,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACb,EAAE,KAAKF,MAAM,CAACK,OAAO,CAAC;MACvD,IAAIK,IAAI,EAAEA,IAAI,CAACJ,SAAS,GAAG,CAACI,IAAI,CAACJ,SAAS;IAC5C,CAAC;IACDU,SAAS,EAAEA,CAACjB,KAAK,EAAEC,MAAM,KAAK;MAC5B,OAAO;QAAE,GAAGD,KAAK;QAAEa,MAAM,EAAEZ,MAAM,CAACK;MAAQ,CAAC;IAC7C;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEP,UAAU;EAAES,UAAU;EAAEI,UAAU;EAAEE,UAAU;EAAEG;AAAU,CAAC,GACxEtB,UAAU,CAACuB,OAAO;AACpB,eAAevB,UAAU,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}